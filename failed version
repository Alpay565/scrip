function processEmails(sendEmails = true) {
  const sheetName = "1_Total Provision"; // The sheet name
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);
  const data = sheet.getDataRange().getValues();

  const emailData = {};

  // Define column positions (adjust based on your sheet)
  const columns = {
    email: 45, // Column "AS" (1-based index: AS = 45)
    ccEmail: 46, // Column "AT" (CC email addresses, 1-based index: AT = 46)
    owner: 20, // Column "T" (Owner, 1-based index: T = 20)
    groupName: 32, // Column "AF" (Group Name, 1-based index: AF = 32)
    material: 1, // Column "A" (Material Number, 1-based index: A = 1)
    materialName: 2, // Column "B" (Material Name, 1-based index: B = 2)
    provision: 37, // Column "AK" (Stock Depreciation Cost, 1-based index: AK = 37)
    quantity: 9, // Column "I" (Quantity, 1-based index: I = 9)
    layoutSaving: 36, // Column "AO" (Layout Saving, 1-based index: AO = 36)
    solution: 24, // Column "X" (Solution, 1-based index: X = 24)
    comment2: 25, // Column "Y" (Comment2, 1-based index: Y = 25)
    status: 30, // Column "AD" (Status, 1-based index: AD = 30)
    pdcaPlan: 43, // Column "P" (PDCA Plan, 1-based index: P = 43)
    pdcaDo: 44, // Column "Q" (PDCA Do, 1-based index: Q = 44)
    pdcaCheck: 45, // Column "R" (PDCA Check, 1-based index: R = 45)
    pdcaAct: 46 // Column "S" (PDCA Act, 1-based index: S = 46)
  };

  // Emojis for each solution (in HTML Unicode format for email body)
  const solutionEmojis = {
    "Return to Supplier": "&#128666;", // Truck emoji
    "Stock Transfer": "&#128230;", // File box emoji
    "Rework": "&#128295;", // Hammer and wrench emoji
    "Design Adaptation": "&#128736;", // Compass emoji
    "Scrap": "&#128465;", // Wastebasket emoji
    "Sales Campaign": "&#128176;", // Money bag emoji
    "Adjust": "&#9881;", // Gear emoji
    "Sell to Another Site": "&#128178;", // Dollar emoji
    "Return to Fuen": "&#128506;" // Factory emoji
  };

  const sheetUrl = sheet.getParent().getUrl(); // Get the spreadsheet URL

  // Gender-based greeting logic
  const maleNames = [
    "Ahmet", "Koray", "Caner", "Derya", "Erman", "Günay", "Gürsan", "İrfan", "Kadir",
    "Kamil", "Kemal", "Murat", "Mustafa", "Resül", "Ruşen", "Samet", "Selamettin",
    "Semih", "Serdar", "Serhad", "Serhat", "Taha", "Tolga", "Volkan", "Yaşar",
    "Yasin", "Cem", "Alpay", "Mehmet", "Yiğit"
  ];

  const femaleNames = [
    "Basma", "Begüm", "Beril", "Hale", "Melis", "Sinem", "Tuğba"
  ];

  // Group rows by owner and solution
  for (let i = 1; i < data.length; i++) {
  const row = data[i];
  const email = row[columns.email - 1];
  const ccEmail = row[columns.ccEmail - 1]; // CC email address from column "AT"
  const owner = row[columns.owner - 1];
  const solution = row[columns.solution - 1]?.replace(/^\d+-/, "").trim(); // Remove numbers like "1-" from solutions
  const groupName = row[columns.groupName - 1]; // Group Name from Column "AF"

  if (!email || !owner || !solution) continue; // Skip rows with missing data

  const key = `${owner}-${solution}`;
  if (!emailData[key]) {
    emailData[key] = { email, ccEmail, owner, solution, references: [], totalProvision: 0, totalLayoutSaving: 0 };
  }

  // Add row data to references based on status
  const layoutSaving = Math.round(row[columns.layoutSaving - 1]) || 0; // Fetch Layout Saving (Column AO)
  const pdcaStatus = getPdcaStatus(row, columns);

  Logger.log(`Row ${i + 1}: PDCA Status = ${pdcaStatus}, Plan = ${row[columns.pdcaPlan - 1]}, Do = ${row[columns.pdcaDo - 1]}`);

  // Check for Devam Eden Aksiyonlar first
  if (pdcaStatus === "Do") {
    emailData[key].references.push(createReference(row, i, columns, sheetUrl, layoutSaving, pdcaStatus, groupName));
    Logger.log(`Added to Devam Eden Aksiyonlar: Material ${row[columns.material - 1]}`);
  } 
  // Check for Başlanmamış Aksiyonlar if not in Devam Eden Aksiyonlar
  else if (pdcaStatus === "Plan") {
    emailData[key].references.push(createReference(row, i, columns, sheetUrl, layoutSaving, pdcaStatus, groupName));
    Logger.log(`Added to Başlanmamış Aksiyonlar: Material ${row[columns.material - 1]}`);
  } else {
    Logger.log(`Row ${i + 1} skipped: PDCA Status = ${pdcaStatus}`);
  }

  // Update totals only for eligible rows
  emailData[key].totalProvision += Math.round(row[columns.provision - 1]) || 0;
  emailData[key].totalLayoutSaving += layoutSaving; // Sum Layout Saving
}

  // Process and send emails
  for (const key in emailData) {
    const { email, ccEmail, owner, solution, references, totalProvision, totalLayoutSaving } = emailData[key];

    // Sort references by provision in descending order
    references.sort((a, b) => b.provision - a.provision);

    // Get emoji for the solution, or use a default if missing
    const solutionEmoji = solutionEmojis[solution] || "&#128230;"; // Default: Box emoji
    const greeting = determineGreeting(owner, maleNames, femaleNames);
    const body = generateEmailBodyWithTables(
      greeting,
      `${solutionEmoji} ${solution}`, // Solution with emoji in body
      references,
      totalProvision,
      totalLayoutSaving
    );

    // Subject with only the recycling emoji (♻️)
    const subject = `♻️ ${solution} / Stock Depreciation Action`;

    if (sendEmails) {
      GmailApp.sendEmail(email, subject, "", { htmlBody: body, cc: ccEmail });
      Logger.log(`Email sent to: ${email}, CC: ${ccEmail}`);
    } else {
      Logger.log(`--- Simulated Email ---`);
      Logger.log(`To: ${email}`);
      Logger.log(`CC: ${ccEmail}`);
      Logger.log(`Subject: ${subject}`);
      Logger.log(`Body:\n${body}`);
    }
  }
}

function createReference(row, rowIndex, columns, sheetUrl, layoutSaving, pdcaStatus, groupName) {
  return {
    material: row[columns.material - 1],
    materialName: row[columns.materialName - 1],
    provision: Math.round(row[columns.provision - 1]) || 0,
    quantity: Math.round(row[columns.quantity - 1]) || 0,
    layoutSaving: layoutSaving,
    groupName: groupName || "-",
    comment2: row[columns.comment2 - 1] || "-",
    status: row[columns.status - 1] || "-",
    pdcaStatus: pdcaStatus,
    rowLink: `${sheetUrl}#gid=${columns.material}&range=A${rowIndex + 1}`
  };
}

function determineGreeting(owner, maleNames, femaleNames) {
  const trimmedOwner = owner.trim();
  const firstName = trimmedOwner.split(" ")[0];

  if (maleNames.includes(firstName)) return `${firstName} Bey Merhaba,`;
  if (femaleNames.includes(firstName)) return `${firstName} Hanım Merhaba,`;

  // Default greeting if the name is not in either list
  return `${firstName} Merhaba,`;
}

function normalizeBoolean(cellValue) {
  Logger.log(`Normalizing value: ${cellValue}`);
  
  // Convert numeric values
  if (typeof cellValue === "number") {
    if (cellValue === 1) return true; // `1` is `true`
    if (cellValue === 0) return false; // `0` is `false`
  }

  // Handle string representations
  if (typeof cellValue === "string") {
    const normalized = cellValue.trim().toUpperCase();
    if (normalized === "TRUE") return true;
    if (normalized === "FALSE" || normalized === "") return false;
  }

  // Handle actual Boolean values
  if (typeof cellValue === "boolean") {
    return cellValue;
  }

  // Default to `false` for any unexpected value
  return false;
}


function getPdcaStatus(row, columns) {
  const isPlanChecked = normalizeBoolean(row[columns.pdcaPlan - 1]);
  const isDoChecked = normalizeBoolean(row[columns.pdcaDo - 1]);

  Logger.log(`Plan Checked: ${isPlanChecked}, Do Checked: ${isDoChecked}`);

  if (isPlanChecked && isDoChecked) return "Do";
  if (isPlanChecked) return "Plan";
  if (normalizeBoolean(row[columns.pdcaCheck - 1])) return "Check";
  if (normalizeBoolean(row[columns.pdcaAct - 1])) return "Act";

  return "-";
}

function generateEmailBodyWithTables(greeting, solution, references, totalProvision, totalLayoutSaving) {
  const baslanmamisAksiyonlar = references.filter(ref => ref.pdcaStatus === "Plan" && !ref.pdcaDo);
  const devamEdenAksiyonlar = references.filter(ref => ref.pdcaStatus === "Do" || (ref.pdcaStatus === "Plan" && ref.pdcaDo));

  let body = `
    <p>${greeting}</p>
    <p><b>${solution}</b> grubu ürünlerin yönetimi için sizin liderliğinizde çalışmaları takip etmek istiyoruz. Katkılarınız için şimdiden teşekkür ederiz.</p>
    <p>Her aksiyon tamamlandığında <b>PDCA döngüsünde ilgili adıma ait kutucuğu işaretleyerek</b> tüm sürecin takibini kolaylaştırabilirsiniz &#9989;.</p>
    <p>Sorularınız ya da desteğe ihtiyaç duyduğunuz bir konu olursa, bana her zaman ulaşabilirsiniz &#128222;. Süreci birlikte başarıyla yöneteceğimizden eminim &#128588;.</p>
    <p>Güncel data aşağıda yer almaktadır:</p>`;

  body += generateHtmlTable("Başlanmamış Aksiyonlar", "#FFC107", baslanmamisAksiyonlar);
  body += `<br><hr><br>`;
  body += generateHtmlTable("Devam Eden Aksiyonlar", "#CCE5FF", devamEdenAksiyonlar);

  body += `<p>&#128184; Toplam Stok Maliyeti: <b>${totalProvision} k€</b></p>`;
  body += `<p>&#128230; Toplam Alan Tasarrufu: <b>${totalLayoutSaving} m²</b></p>`;

  return body;
}

function generateHtmlTable(title, color, references) {
  let table = `
    <table border="1" style="border-collapse: collapse; width: 100%; font-size: 12px;">
      <tr style="background-color: ${color}; color: black; font-weight: bold; text-align: center;">
        <td colspan="10">${title}</td>
      </tr>
      <tr style="background-color: #f2f2f2;">
        <th>#</th>
        <th>Referans</th>
        <th>Ürün Adı</th>
        <th>Stok Maliyeti (k€)</th>
        <th>Toplam Adet</th>
        <th>Grup İsmi</th>
        <th>Ön Analiz Yorumu</th>
        <th>Durum</th>
        <th>PDCA</th>
        <th>Satır Linki</th>
      </tr>`;

  if (references.length > 0) {
    references.forEach((ref, index) => {
      const pdcaBgColor = getPdcaBackgroundColor(ref.pdcaStatus);
      table += `
        <tr>
          <td>${index + 1}</td>
          <td>${ref.material}</td>
          <td>${ref.materialName}</td>
          <td>${ref.provision}</td>
          <td>${ref.quantity}</td>
          <td>${ref.groupName}</td>
          <td>${ref.comment2}</td>
          <td>${ref.status}</td>
          <td style="background-color: ${pdcaBgColor}; color: black; font-weight: bold;">${ref.pdcaStatus}</td>
          <td><a href="${ref.rowLink}" target="_blank">Link</a></td>
        </tr>`;
    });
  } else {
    table += `
      <tr>
        <td colspan="10" style="text-align: center; color: gray;">No references available</td>
      </tr>`;
  }

  table += `</table>`;
  return table;
}

function getPdcaBackgroundColor(pdcaStatus) {
  switch (pdcaStatus) {
    case "Plan": return "#FFFFFF"; // White
    case "Do": return "#FFD966"; // Light Orange
    case "Check": return "#D9A6A6"; // Soft Brown
    case "Act": return "#A8D08D"; // Light Green
    default: return "#F2F2F2"; // Light Gray for default
  }
}
