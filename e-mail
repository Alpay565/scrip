function processEmails(sendEmails = true) { 
  const sheetName = "1_Total Provision";
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);
  const data = sheet.getDataRange().getValues();

  const emailData = {};

  const columns = {
    email: 45,
    ccEmail: 46,
    owner: 20,
    groupName: 32,
    material: 1,
    materialName: 2,
    provision: 37,
    quantity: 9,
    layoutSaving: 36, // Correct column for layout saving
    solution: 24,
    comment2: 25,
    status: 30,
    pdcaPlan: 43,
    pdcaDo: 44,
    pdcaCheck: 45,
    pdcaAct: 46,
  };

  const sheetUrl = sheet.getParent().getUrl();

  // Male and Female Names
  const maleNames = [
    "Ahmet", "Koray", "Caner", "Derya", "Erman", "Günay", "Gürsan", "İrfan", "Kadir",
    "Kamil", "Kemal", "Murat", "Mustafa", "Resül", "Ruşen", "Samet", "Selamettin",
    "Semih", "Serdar", "Serhad", "Serhat", "Taha", "Tolga", "Volkan", "Yaşar",
    "Yasin", "Cem", "Alpay", "Mehmet", "Yiğit"
  ];

  const femaleNames = [
    "Basma", "Begüm", "Beril", "Hale", "Melis", "Sinem", "Tuğba"
  ];

  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const email = row[columns.email - 1];
    const ccEmail = row[columns.ccEmail - 1];
    const owner = row[columns.owner - 1];
    const solution = row[columns.solution - 1]?.replace(/^\d+-/, "").trim();
    const groupName = row[columns.groupName - 1];

    if (!email || !owner || !solution) continue;

    const key = `${owner}-${solution}`;
    if (!emailData[key]) {
      emailData[key] = {
        email,
        ccEmail,
        owner,
        solution,
        references: [],
        totalProvision: 0, // Sum stock cost
      };
    }

    // Add row data to references
    emailData[key].references.push({
      material: row[columns.material - 1],
      materialName: row[columns.materialName - 1],
      provision: Math.round(row[columns.provision - 1]) || 0,
      quantity: Math.round(row[columns.quantity - 1]) || 0,
      groupName: groupName || "-",
      comment2: row[columns.comment2 - 1] || "-",
      status: row[columns.status - 1] || "-",
      pdcaStatus: getPdcaStatus(row, columns),
      rowLink: `${sheetUrl}#gid=${sheet.getSheetId()}&range=A${i + 1}`,
    });

    // Update totals
    emailData[key].totalProvision += Math.round(row[columns.provision - 1]) || 0;
  } // End of data processing loop

  for (const key in emailData) {
    const { email, ccEmail, owner, solution, references, totalProvision } = emailData[key];
    references.sort((a, b) => b.provision - a.provision);

    const greeting = determineGreeting(owner, maleNames, femaleNames);
    const body = generateEmailBodyWithTables(
      greeting,
      solution,
      references,
      totalProvision
    );

    const subject = `♻️ ${solution} / Stock Depreciation Action`;

    if (sendEmails) {
      GmailApp.sendEmail(email, subject, "", { htmlBody: body, cc: ccEmail });
    } else {
      Logger.log(`Simulated email sent to: ${email}`);
    }
  } // End of email sending loop
} // End of processEmails function

function getPdcaStatus(row, columns) {
  if (row[columns.pdcaPlan - 1]) return "Plan";
  if (row[columns.pdcaDo - 1]) return "Do";
  if (row[columns.pdcaCheck - 1]) return "Check";
  if (row[columns.pdcaAct - 1]) return "Act";
  return "-";
} // End of getPdcaStatus function

function determineGreeting(owner, maleNames, femaleNames) {
  const trimmedOwner = owner.trim();
  const firstName = trimmedOwner.split(" ")[0];

  if (maleNames.includes(firstName)) return `${firstName} Bey Merhaba,`;
  if (femaleNames.includes(firstName)) return `${firstName} Hanım Merhaba,`;

  return `${firstName} Merhaba,`; // Default fallback
} // End of determineGreeting function

function generateEmailBodyWithTables(greeting, solution, references, totalProvision) {
  let body = `
    <p>${greeting}</p>
    <p><b>${solution}</b> grubu ürünlerin yönetimi için sizin liderliğinizde çalışmaları takip etmek istiyoruz. Katkılarınız için şimdiden teşekkür ederiz.</p>
    <p>Her aksiyon tamamlandığında <b>PDCA döngüsünde ilgili adıma ait kutucuğu işaretleyerek</b> tüm sürecin takibini kolaylaştırabilirsiniz &#9989;.</p>
    <p>Sorularınız ya da desteğe ihtiyaç duyduğunuz bir konu olursa, bana her zaman ulaşabilirsiniz &#128222;. Süreci birlikte başarıyla yöneteceğimizden eminim &#128588;.</p>
    <p>Güncel data aşağıda yer almaktadır:</p>`;
  body += generateHtmlTable("Tüm Aksiyonlar", "#CCE5FF", references);
  body += `<p>&#128184; Toplam Stok Maliyeti: <b>${totalProvision} k€</b></p>`;
  return body;
} // End of generateEmailBodyWithTables function

function generateHtmlTable(title, color, references) {
  let table = `
    <table border="1" style="border-collapse: collapse; width: 100%; font-size: 12px;">
      <tr style="background-color: ${color}; color: black; font-weight: bold; text-align: center;">
        <td colspan="10">${title}</td>
      </tr>
      <tr style="background-color: #f2f2f2;">
        <th>#</th>
        <th>Referans</th>
        <th>Ürün Adı</th>
        <th>Stok Maliyeti (k€)</th>
        <th>Toplam Adet</th>
        <th>Grup İsmi</th>
        <th>Ön Analiz Yorumu</th>
        <th>Durum</th>
        <th>PDCA</th>
        <th>Satır Linki</th>
      </tr>`;
  if (references.length > 0) {
    references.forEach((ref, index) => {
      const pdcaBgColor = getPdcaBackgroundColor(ref.pdcaStatus);
      table += `
        <tr>
          <td>${index + 1}</td>
          <td>${ref.material}</td>
          <td>${ref.materialName}</td>
          <td>${ref.provision}</td>
          <td>${ref.quantity}</td>
          <td>${ref.groupName}</td>
          <td>${ref.comment2}</td>
          <td>${ref.status}</td>
          <td style="background-color: ${pdcaBgColor}; color: black; font-weight: bold;">${ref.pdcaStatus}</td>
          <td><a href="${ref.rowLink}" target="_blank">Link</a></td>
        </tr>`;
    });
  } else {
    table += `<tr><td colspan="10" style="text-align: center; color: gray;">No references available</td></tr>`;
  }
  table += `</table>`;
  return table;
} // End of generateHtmlTable function

function getPdcaBackgroundColor(pdcaStatus) {
  switch (pdcaStatus) {
    case "Plan": return "#FFFFFF";
    case "Do": return "#FFD966";
    case "Check": return "#D9A6A6";
    case "Act": return "#A8D08D";
    default: return "#F2F2F2";
  }
} // End of getPdcaBackgroundColor function

function determineGreeting(owner) {
  const trimmedOwner = owner.trim();
  const firstName = trimmedOwner.split(" ")[0];
  return `${firstName} Bey Merhaba,`;
}

function getPdcaStatus(row, columns) {
  if (row[columns.pdcaPlan - 1]) return "Plan";
  if (row[columns.pdcaDo - 1]) return "Do";
  if (row[columns.pdcaCheck - 1]) return "Check";
  if (row[columns.pdcaAct - 1]) return "Act";
  return "-";
}
