function sendEmails(simulation = false) {
  const sheetName = "1_Total Provision";
  const spreadsheetUrl = SpreadsheetApp.getActiveSpreadsheet().getUrl();
  const emailColumn = "AS";
  const ccColumn = "AT";
  const ownerNameColumn = "T";
  const solutionColumn = "X";
  const referenceColumn = "A";
  const productNameColumn = "B";
  const stockCostColumn = "K";
  const totalQuantityColumn = "I";
  const groupNameColumn = "AF";
  const analysisCommentColumn = "Y";
  const statusColumn = "AD";
  const consumptionColumn = "AH"; // Tüketim column
  const pdcaColumns = ["P", "Q", "R", "S"];
  const maleNames = ["Ahmet", "Koray", "Gürsan", "Kadir", "Kemal", "Mustafa", "Samet", "Tolga", "Yasin", "Alpay"];
  const femaleNames = ["Tuğba"];

  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = spreadsheet.getSheetByName(sheetName);
  const data = sheet.getDataRange().getValues();

  const rows = data.map((row, index) => ({
    index: index + 1,
    ownerEmail: row[getColumnIndex(emailColumn)],
    ccEmails: String(row[getColumnIndex(ccColumn)] || "").split(",").map(email => email.trim()),
    ownerName: String(row[getColumnIndex(ownerNameColumn)] || "").trim(),
    solution: String(row[getColumnIndex(solutionColumn)] || "").replace(/^\d+-/, "").trim(),
    reference: row[getColumnIndex(referenceColumn)],
    productName: row[getColumnIndex(productNameColumn)],
    stockCost: Math.round(row[getColumnIndex(stockCostColumn)] || 0),
    totalQuantity: row[getColumnIndex(totalQuantityColumn)],
    groupName: row[getColumnIndex(groupNameColumn)],
    analysisComment: row[getColumnIndex(analysisCommentColumn)],
    status: row[getColumnIndex(statusColumn)],
    consumption: row[getColumnIndex(consumptionColumn)], // Fetch consumption data
    pdca: calculatePDCAStatus(row, pdcaColumns),
  }));

  const validRows = rows.filter(row => isValidEmail(row.ownerEmail));

  const groupedData = groupByMultipleKeys(validRows, ["ownerName", "solution"]);

  Object.entries(groupedData).forEach(([key, groupedRows]) => {
    const [ownerName, solution] = key.split("|");
    const ownerEmail = groupedRows[0].ownerEmail;
    const ccEmails = groupedRows[0].ccEmails.filter(isValidEmail);
    const subject = `♻️ ${solution} / Stock Depreciation Action`;

    const greeting = generateGreeting(ownerName, maleNames, femaleNames);

    const body = generateEmailBody(greeting, solution, groupedRows, sheet, spreadsheetUrl);

    if (simulation) {
      Logger.log(`To: ${ownerEmail}, CC: ${ccEmails.join(", ")}, Subject: ${subject}, Body:\n${body}`);
    } else {
      GmailApp.sendEmail(ownerEmail, subject, body, {
        cc: ccEmails.length ? ccEmails.join(",") : undefined,
        htmlBody: body,
      });
    }
  });

  Logger.log(`${Object.keys(groupedData).length} emails processed.`);
}

function generateGreeting(ownerName, maleNames, femaleNames) {
  const firstName = ownerName.split(" ")[0];

  if (maleNames.includes(firstName)) {
    return `${firstName} Bey`;
  } else if (femaleNames.includes(firstName)) {
    return `${firstName} Hanım`;
  } else {
    return `${firstName}`;
  }
}

function generateEmailBody(greeting, solution, rows, sheet, spreadsheetUrl) {
  let totalStockCostPlan = 0;
  let totalStockCostProgress = 0;

  // Filter rows for the two tables
  const plannedRows = rows.filter(row => row.pdca === "Plan");
  const progressRows = rows.filter(row => row.pdca === "Do" || row.pdca === "Check");

  // Generate HTML for the "Planlanan Aksiyonlar" table
  const plannedRowsHtml = plannedRows
    .map((row, index) => {
      totalStockCostPlan += row.stockCost || 0;
      const consumption = getConsumptionValue(row.status, row.consumption);
      const rowUrl = `${spreadsheetUrl}#gid=${sheet.getSheetId()}&range=A${row.index}`;
      return `
        <tr>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">${index + 1}</td>
          <td style="padding: 8px; border: 1px solid #ddd;">${row.reference || "N/A"}</td>
          <td style="padding: 8px; border: 1px solid #ddd;">${row.productName || "N/A"}</td>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd; width: 110px;">${row.stockCost}</td>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">${row.totalQuantity || "N/A"}</td>
          <td style="padding: 8px; border: 1px solid #ddd;">${row.groupName || "N/A"}</td>
          <td style="padding: 8px; border: 1px solid #ddd; width: 300px;">${row.analysisComment || "N/A"}</td>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">${row.status || "N/A"}</td>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">${consumption}</td>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">${row.pdca || "N/A"}</td>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd;"><a href="${rowUrl}">Link</a></td>
        </tr>`;
    })
    .join("");

  // Generate HTML for the "Devam Eden Aksiyonlar" table
  const progressRowsHtml = progressRows
    .map((row, index) => {
      totalStockCostProgress += row.stockCost || 0;
      const consumption = getConsumptionValue(row.status, row.consumption);
      const rowUrl = `${spreadsheetUrl}#gid=${sheet.getSheetId()}&range=A${row.index}`;
      return `
        <tr>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">${index + 1}</td>
          <td style="padding: 8px; border: 1px solid #ddd;">${row.reference || "N/A"}</td>
          <td style="padding: 8px; border: 1px solid #ddd;">${row.productName || "N/A"}</td>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd; width: 110px;">${row.stockCost}</td>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">${row.totalQuantity || "N/A"}</td>
          <td style="padding: 8px; border: 1px solid #ddd;">${row.groupName || "N/A"}</td>
          <td style="padding: 8px; border: 1px solid #ddd; width: 300px;">${row.analysisComment || "N/A"}</td>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">${row.status || "N/A"}</td>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">${consumption}</td>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">${row.pdca || "N/A"}</td>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd;"><a href="${rowUrl}">Link</a></td>
        </tr>`;
    })
    .join("");

  // Combine the two tables with "Toplam Stok Maliyeti" included
  return `
    <p>${greeting} merhabalar,</p>
    <p><strong>${solution}</strong> grubu ürünlerin yönetimi için sizin liderliğinizde çalışmaları takip etmek istiyoruz. Katkılarınız için şimdiden teşekkür ederiz.</p>
    <p>Her aksiyon tamamlandığında <strong>PDCA döngüsünde ilgili adıma ait kutucuğu işaretleyerek</strong> tüm sürecin takibini kolaylaştırabilirsiniz &#x2705;.</p>
    <p>Sorularınız ya da desteğe ihtiyaç duyduğunuz bir konu olursa, bana her zaman ulaşabilirsiniz. Süreci birlikte başarıyla yöneteceğimizden eminim &#x1F64C;.</p>

    <table style="border-collapse: collapse; width: 100%; font-family: Arial, sans-serif;">
      <thead>
        <tr style="background-color: #FFF9C4; color: black;">
          <th colspan="11" style="padding: 10px; text-align: center;">Planlanan Aksiyonlar</th>
        </tr>
        <tr style="background-color: #FFF9C4; color: black;">
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">#</th>
          <th style="padding: 8px; border: 1px solid #ddd;">Referans</th>
          <th style="padding: 8px; border: 1px solid #ddd;">Ürün Adı</th>
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd; width: 110px;">Stok Maliyeti<br>(k€)</th>
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">Toplam Adet</th>
          <th style="padding: 8px; border: 1px solid #ddd;">Grup İsmi</th>
          <th style="padding: 8px; border: 1px solid #ddd; width: 300px;">Ön Analiz Yorumu</th>
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">Durum</th>
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">Tüketim</th>
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">PDCA Durumu</th>
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">Satır Linki</th>
        </tr>
      </thead>
      <tbody>
        ${plannedRowsHtml}
      </tbody>
    </table>
    <p style="margin-top: 15px;">&#x1F4B8; Toplam Stok Maliyeti: <b>${totalStockCostPlan} k€</b></p>

    <table style="border-collapse: collapse; width: 100%; font-family: Arial, sans-serif; margin-top: 20px;">
      <thead>
        <tr style="background-color: #d0eaff; color: black;">
          <th colspan="11" style="padding: 10px; text-align: center;">Devam Eden Aksiyonlar</th>
        </tr>
        <tr style="background-color: #d0eaff; color: black;">
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">#</th>
          <th style="padding: 8px; border: 1px solid #ddd;">Referans</th>
          <th style="padding: 8px; border: 1px solid #ddd;">Ürün Adı</th>
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd; width: 110px;">Stok Maliyeti<br>(k€)</th>
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">Toplam Adet</th>
          <th style="padding: 8px; border: 1px solid #ddd;">Grup İsmi</th>
          <th style="padding: 8px; border: 1px solid #ddd; width: 300px;">Ön Analiz Yorumu</th>
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">Durum</th>
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">Tüketim</th>
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">PDCA Durumu</th>
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">Satır Linki</th>
        </tr>
      </thead>
      <tbody>
        ${progressRowsHtml}
      </tbody>
    </table>
    <p style="margin-top: 15px;">&#x1F4B8; Toplam Stok Maliyeti: <b>${totalStockCostProgress} k€</b></p>
  `;
}

function getConsumptionValue(status, consumption) {
  // Ensure both status and consumption are handled consistently
  status = String(status).trim().toUpperCase(); // Normalize status to avoid case or space mismatches
  const parsedConsumption = parseInt(consumption, 10); // Parse consumption as an integer

  if (status === "OBSOLETE") return "-";
  if (status === "LOSS MAKING") return "P-30";
  if (status === "SLOW MOVING") {
    if (parsedConsumption === 25) return "1-2 Years";
    if (parsedConsumption === 50) return "2-3 Years";
    if (parsedConsumption === 75) return "3-4 Years";
    if (parsedConsumption === 95) return "4+ Years";
  }
  return "N/A";
}

function calculatePDCAStatus(row, pdcaColumns) {
  const statuses = pdcaColumns.map(col => row[getColumnIndex(col)] === true);
  if (statuses[3]) return "Act";
  if (statuses[2]) return "Check";
  if (statuses[1]) return "Do";
  if (statuses[0]) return "Plan";
  return "N/A";
}

function isValidEmail(email) {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return email && emailRegex.test(email);
}

function getColumnIndex(columnLetter) {
  const columnNumber = columnLetter
    .split("")
    .reduce((acc, char) => acc * 26 + char.charCodeAt(0) - 64, 0);
  return columnNumber - 1;
}

function groupByMultipleKeys(array, keys) {
  return array.reduce((result, item) => {
    const groupKey = keys.map(key => item[key]).join("|");
    (result[groupKey] = result[groupKey] || []).push(item);
    return result;
  }, {});
}
