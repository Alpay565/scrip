function sendEmails(simulation = true) {
  const sheetName = "1_Total Provision";
  const emailColumn = "AR";
  const ccColumn = "AS";
  const ownerNameColumn = "R";
  const solutionColumn = "V";
  const referenceColumn = "A";
  const productNameColumn = "B";
  const stockCostColumn = "AI";
  const totalQuantityColumn = "I";
  const groupNameColumn = "AD";
  const analysisCommentColumn = "W";
  const statusColumn = "AC";
  const consumptionColumn = "AF"; // Tüketim column
  const pdcaColumns = ["N", "O", "P", "Q"];
  const maleNames = ["Ahmet", "Koray", "Gürsan", "Kadir", "Kemal", "Mustafa", "Samet", "Tolga", "Yasin", "Alpay"];
  const femaleNames = ["Tuğba"];
  const emailCount = {};

  // Ensure `spreadsheet` is defined here
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet(); // Correctly define spreadsheet
  const spreadsheetUrl = spreadsheet.getUrl(); // Define the spreadsheet URL here
  const sheet = spreadsheet.getSheetByName(sheetName);
  const data = sheet.getDataRange().getValues();

  const rows = data.map((row, index) => ({
    index: index + 1,
    ownerEmail: row[getColumnIndex(emailColumn)],
    ccEmails: String(row[getColumnIndex(ccColumn)] || "").split(",").map(email => email.trim()),
    ownerName: String(row[getColumnIndex(ownerNameColumn)] || "").trim(),
    solution: String(row[getColumnIndex(solutionColumn)] || "").replace(/^\d+-/, "").trim(),
    reference: row[getColumnIndex(referenceColumn)],
    productName: row[getColumnIndex(productNameColumn)],
    stockCost: (row[getColumnIndex(stockCostColumn)] || 0) * 1000,
    totalQuantity: row[getColumnIndex(totalQuantityColumn)],
    groupName: row[getColumnIndex(groupNameColumn)],
    analysisComment: row[getColumnIndex(analysisCommentColumn)],
    status: row[getColumnIndex(statusColumn)],
    consumption: row[getColumnIndex(consumptionColumn)], // Fetch consumption data
    pdca: calculatePDCAStatus(row, pdcaColumns),
    ownerComment: row[getColumnIndex("X")],
  }));

  // Filter valid rows
  const validRows = rows.filter(row => isValidEmail(row.ownerEmail) && row.solution);

  // Group data by owner name and solution
  const groupedData = groupByMultipleKeys(validRows, ["ownerName", "solution"]);

  // Filter out groups where all references are at the "Act" level
  const filteredGroups = Object.entries(groupedData).filter(([key, groupedRows]) => {
    return groupedRows.some(row => row.pdca !== "Act"); // At least one reference is not at "Act"
  });

  // Process each group
  filteredGroups.forEach(([key, groupedRows]) => {
    const [ownerName, solution] = key.split("|");
    const ownerEmail = groupedRows[0].ownerEmail;
    const ccEmails = groupedRows[0].ccEmails.filter(isValidEmail);
    const subject = `♻️ ${solution} / Stock Depreciation Action`;

    const greeting = generateGreeting(ownerName, maleNames, femaleNames);

    // Create a new spreadsheet for this group
    const spreadsheetFile = createSpreadsheetForGroup(groupedRows, solution);
    const newSpreadsheetUrl = spreadsheetFile.getUrl(); // Separate variable for new sheet link

    // Generate email body with the correct URLs
    const body = `
    <p>${greeting} merhabalar,</p>
    <p><strong>${solution}</strong> grubu ürünlerin yönetimi için sizin liderliğinizde çalışmaları takip etmek istiyoruz. &#129309; Katkılarınız için şimdiden teşekkür ederiz. &#128079;</p>
    <p><strong>${solution}</strong> grubu ürünlerin yönetimi için aşağıdaki tabloda detaylarıyla birlikte aksiyonları görebilirsiniz. &#128293;</p> 
    <p>Ayrıca bu gruba ait detaylı referans bilgileri için lütfen <a href="${newSpreadsheetUrl}">${solution} - Referans Listesi</a> &#128433; bağlantısını kullanınız.</p>
    <p><strong>Önemli bir not:</strong> Hurda edilecek referansların 11 Aralık'a kadar belirlenmesi büyük önem taşımaktadır. Bu tarihten sonra üst yönetime raporlanmaya başlanacaktır.</p>
    <p>Herhangi bir sorunuz olursa lütfen benimle iletişime geçmekten çekinmeyin. &#128588;</p>
    ${generateEmailBody(greeting, solution, groupedRows, sheet, spreadsheetUrl)}
    `;

    if (simulation) {
      Logger.log(`To: ${ownerEmail}, CC: ${ccEmails.join(", ")}, Subject: ${subject}`);
  
  // Track the email count
  if (!emailCount[ownerEmail]) {
    emailCount[ownerEmail] = 0;
  }
  emailCount[ownerEmail]++;
} else {
  GmailApp.sendEmail(ownerEmail, subject, body, {
    cc: ccEmails.length ? ccEmails.join(", ") : undefined,
    htmlBody: body,
    });
   }
   if (simulation) {
  Logger.log("Simulation Summary: Emails sent to each recipient");
  Object.entries(emailCount).forEach(([email, count]) => {
    Logger.log(`Recipient: ${email}, Emails Sent: ${count}`);
    });
   }
  });
}

function calculatePDCAStatus(row, pdcaColumns) {
  const statuses = pdcaColumns.map(col => row[getColumnIndex(col)] === true);
  if (statuses[3]) return "Act";
  if (statuses[2]) return "Check";
  if (statuses[1]) return "Do";
  if (statuses[0]) return "Plan";
  return "N/A";
}

function generateGreeting(ownerName, maleNames, femaleNames) {
  const firstName = ownerName.split(" ")[0];

  if (maleNames.includes(firstName)) {
    return `${firstName} Bey`;
  } else if (femaleNames.includes(firstName)) {
    return `${firstName} Hanım`;
  } else {
    return `${firstName}`;
  }
}

function isValidEmail(email) {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return email && emailRegex.test(email);
}

function getColumnIndex(columnLetter) {
  const columnNumber = columnLetter
    .split("")
    .reduce((acc, char) => acc * 26 + char.charCodeAt(0) - 64, 0);
  return columnNumber - 1;
}

function groupByMultipleKeys(array, keys) {
  return array.reduce((result, item) => {
    const groupKey = keys.map(key => item[key]).join("|");
    (result[groupKey] = result[groupKey] || []).push(item);
    return result;
  }, {});
}

function generateGreeting(ownerName, maleNames, femaleNames) {
  const firstName = ownerName.split(" ")[0];

  if (maleNames.includes(firstName)) {
    return `${firstName} Bey`;
  } else if (femaleNames.includes(firstName)) {
    return `${firstName} Hanım`;
  } else {
    return `${firstName}`;
  }
}

function generateEmailBody(greeting, solution, rows, sheet, spreadsheetUrl) {
  let totalStockCostPlan = 0;
  let totalStockCostProgress = 0;

  // Filter rows for the two tables
  const plannedRows = rows.filter(row => row.pdca === "Plan").sort((a, b) => b.stockCost - a.stockCost);
  const progressRows = rows.filter(row => row.pdca === "Do" || row.pdca === "Check").sort((a, b) => b.stockCost - a.stockCost);

  // Generate HTML for the "Planlanan Aksiyonlar" table
  const plannedRowsHtml = plannedRows
    .map((row, index) => {
      totalStockCostPlan += row.stockCost || 0;
      let formattedStockCost = Math.round(row.stockCost); // Use let instead of const
      const consumption = getConsumptionValue(row.status, row.consumption);
      const rowUrl = `${spreadsheetUrl}#gid=${sheet.getSheetId()}&range=A${row.index}`;
      return `
        <tr>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">${index + 1}</td>
          <td style="padding: 8px; border: 1px solid #ddd;">${row.reference || "N/A"}</td>
          <td style="padding: 8px; border: 1px solid #ddd;">${row.productName || "N/A"}</td>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd; width: 110px;">${formattedStockCost}</td>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">${row.totalQuantity || "N/A"}</td>
          <td style="padding: 8px; border: 1px solid #ddd;">${row.groupName || "N/A"}</td>
          <td style="padding: 8px; border: 1px solid #ddd; width: 300px;">${row.analysisComment || "N/A"}</td>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">${row.status || "N/A"}</td>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">${consumption}</td>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">${row.pdca || "N/A"}</td>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd;"><a href="${rowUrl}">Link</a></td>
          <td style="padding: 8px; border: 1px solid #ddd;">${row.ownerComment || "N/A"}</td>
        </tr>`;
    })
    .join("");

  // Generate HTML for the "Devam Eden Aksiyonlar" table
  const progressRowsHtml = progressRows
    .map((row, index) => {
      totalStockCostProgress += row.stockCost || 0;
      let formattedStockCost = Math.round(row.stockCost); // Use let instead of const
      const consumption = getConsumptionValue(row.status, row.consumption);
      const rowUrl = `${SpreadsheetApp.getActiveSpreadsheet().getUrl()}#gid=${sheet.getSheetId()}&range=A${row.index}`;
      return `
        <tr>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">${index + 1}</td>
          <td style="padding: 8px; border: 1px solid #ddd;">${row.reference || "N/A"}</td>
          <td style="padding: 8px; border: 1px solid #ddd;">${row.productName || "N/A"}</td>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd; width: 110px;">${formattedStockCost}</td>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">${row.totalQuantity || "N/A"}</td>
          <td style="padding: 8px; border: 1px solid #ddd;">${row.groupName || "N/A"}</td>
          <td style="padding: 8px; border: 1px solid #ddd; width: 300px;">${row.analysisComment || "N/A"}</td>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">${row.status || "N/A"}</td>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">${consumption}</td>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">${row.pdca || "N/A"}</td>
          <td style="padding: 8px; text-align: center; border: 1px solid #ddd;"><a href="${rowUrl}">Link</a></td>
          <td style="padding: 8px; border: 1px solid #ddd;">${row.ownerComment || "N/A"}</td>
        </tr>`;
    })
    .join("");

  // Combine the two tables with "Toplam Stok Maliyeti" included
  return `

    <table style="border-collapse: collapse; width: 100%; font-family: Arial, sans-serif;">
      <thead>
        <tr style="background-color: #FFF9C4; color: black;">
          <th colspan="12" style="padding: 10px; text-align: center;">Planlanan Aksiyonlar</th>
        </tr>
        <tr style="background-color: #FFF9C4; color: black;">
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">#</th>
          <th style="padding: 8px; border: 1px solid #ddd;">Referans</th>
          <th style="padding: 8px; border: 1px solid #ddd;">Ürün Adı</th>
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd; width: 110px;">Stok Maliyeti<br>(€)</th>
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">Toplam Adet</th>
          <th style="padding: 8px; border: 1px solid #ddd;">Grup İsmi</th>
          <th style="padding: 8px; border: 1px solid #ddd; width: 300px;">Ön Analiz Yorumu</th>
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">Durum</th>
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">Tüketim</th>
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">PDCA Durumu</th>
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">Satır Linki</th>
          <th style="padding: 8px; border: 1px solid #ddd; width: 300px;">Aksiyon Sahibi Yorumu</th>
        </tr>
      </thead>
      <tbody>
        ${plannedRowsHtml}
      </tbody>
    </table>
   <p style="margin-top: 15px;">&#x1F4B8; Toplam Stok Maliyeti (Planlanan Aksiyonlar): <b>${(totalStockCostPlan / 1000).toFixed(2)} k€</b></p>

    <table style="border-collapse: collapse; width: 100%; font-family: Arial, sans-serif; margin-top: 20px;">
      <thead>
        <tr style="background-color: #d0eaff; color: black;">
          <th colspan="12" style="padding: 10px; text-align: center;">Devam Eden Aksiyonlar</th>
        </tr>
        <tr style="background-color: #d0eaff; color: black;">
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">#</th>
          <th style="padding: 8px; border: 1px solid #ddd;">Referans</th>
          <th style="padding: 8px; border: 1px solid #ddd;">Ürün Adı</th>
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd; width: 110px;">Stok Maliyeti<br>(€)</th>
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">Toplam Adet</th>
          <th style="padding: 8px; border: 1px solid #ddd;">Grup İsmi</th>
          <th style="padding: 8px; border: 1px solid #ddd; width: 300px;">Ön Analiz Yorumu</th>
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">Durum</th>
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">Tüketim</th>
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">PDCA Durumu</th>
          <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">Satır Linki</th>
          <th style="padding: 8px; border: 1px solid #ddd; width: 300px;">Aksiyon Sahibi Yorumu</th>
        </tr>
      </thead>
      <tbody>
        ${progressRowsHtml}
      </tbody>
    </table>
    <p style="margin-top: 15px;">&#x1F4B8; Toplam Stok Maliyeti (Devam Eden Aksiyonlar): <b>${(totalStockCostProgress / 1000).toFixed(2)} k€</b></p>
  `;
}

function getConsumptionValue(status, consumption) {
  // Ensure both status and consumption are handled consistently
  status = String(status).trim().toUpperCase(); // Normalize status to avoid case or space mismatches
  const parsedConsumption = parseInt(consumption, 10); // Parse consumption as an integer

  if (status === "OBSOLETE") return "-";
  if (status === "LOSS MAKING") return "P-30";
  if (status === "SLOW MOVING") {
    if (parsedConsumption === 25) return "1-2 Years";
    if (parsedConsumption === 50) return "2-3 Years";
    if (parsedConsumption === 75) return "3-4 Years";
    if (parsedConsumption === 95) return "4+ Years";
    return "Cannot Be Consumed"; // Explicitly mark items that don't fall within known ranges
  }
  return "N/A"; // For all other cases
}

function calculatePDCAStatus(row, pdcaColumns) {
  const statuses = pdcaColumns.map(col => row[getColumnIndex(col)] === true);
  if (statuses[3]) return "Act";
  if (statuses[2]) return "Check";
  if (statuses[1]) return "Do";
  if (statuses[0]) return "Plan";
  return "N/A";
}

function isValidEmail(email) {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return email && emailRegex.test(email);
}

function getColumnIndex(columnLetter) {
  const columnNumber = columnLetter
    .split("")
    .reduce((acc, char) => acc * 26 + char.charCodeAt(0) - 64, 0);
  return columnNumber - 1;
}

function groupByMultipleKeys(array, keys) {
  return array.reduce((result, item) => {
    const groupKey = keys.map(key => item[key]).join("|");
    (result[groupKey] = result[groupKey] || []).push(item);
    return result;
  }, {});
}

function createSpreadsheetForGroup(groupedRows, solution) {
  const sheetName = `${solution} - Referanslar`;
  const spreadsheet = SpreadsheetApp.create(sheetName);
  const sheet = spreadsheet.getActiveSheet();

  // Define headers
  const headers = [
    "#", "Referans", "Ürün Adı", "Stok Maliyeti (k€)", "Toplam Adet",
    "Grup İsmi", "Ön Analiz Yorumu", "Durum", "Tüketim", "PDCA Durumu", "Satır Linki"
  ];

  // Set headers
  sheet.appendRow(headers);

  // Populate rows
  groupedRows.forEach((row, index) => {
    const rowUrl = `${SpreadsheetApp.getActiveSpreadsheet().getUrl()}#gid=${row.index}&range=A${row.index}`;
    sheet.appendRow([
      index + 1, // #
      row.reference || "N/A", // Referans
      row.productName || "N/A", // Ürün Adı
      (row.stockCost / 1000).toFixed(2), // Stok Maliyeti (k€)
      row.totalQuantity || "N/A", // Toplam Adet
      row.groupName || "N/A", // Grup İsmi
      row.analysisComment || "N/A", // Ön Analiz Yorumu
      row.status || "N/A", // Durum
      getConsumptionValue(row.status, row.consumption), // Tüketim
      row.pdca || "N/A", // PDCA Durumu
      rowUrl // Satır Linki
    ]);
  });

  // Apply formatting
  const range = sheet.getRange(1, 1, sheet.getLastRow(), sheet.getLastColumn());

  // Bold headers
  const headerRange = sheet.getRange(1, 1, 1, headers.length);
  headerRange.setFontWeight("bold");
  headerRange.setBackground("#d0eaff"); // Light blue background for headers
  headerRange.setHorizontalAlignment("center");

  // Auto-fit columns and apply borders
  sheet.autoResizeColumns(1, headers.length);
  range.setBorder(true, true, true, true, true, true);

  // Set column-specific formats
  sheet.setColumnWidth(3, 250); // Wider column for "Ürün Adı"
  sheet.setColumnWidth(7, 300); // Wider column for "Ön Analiz Yorumu"
  sheet.setColumnWidth(11, 150); // Narrower column for "Satır Linki"

  // Apply alternating row colors
  const dataRange = sheet.getRange(2, 1, sheet.getLastRow() - 1, headers.length);
  const banding = dataRange.applyRowBanding(SpreadsheetApp.BandingTheme.LIGHT_GREY);
  banding.setFirstRowColor("#f2f2f2");
  banding.setSecondRowColor("#ffffff");

  return spreadsheet;
}
